# --- –ò–º–ø–æ—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ Python
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞)
import logging  # –î–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –∏–º–µ—Ç—å)

# –ú–æ–¥—É–ª–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ PyQt6 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
from PyQt6.QtCore import Qt, pyqtSignal, QThread, pyqtSlot, QSize
from PyQt6.QtGui import QPixmap, QFontDatabase, QImage, QIcon
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton, QFileDialog, QMessageBox,
    QHBoxLayout, QComboBox, QSlider, QProgressBar, QListWidget, QListWidgetItem, QMenu,
    QSpinBox, QFrame, QStackedWidget, QRadioButton, QGridLayout
)

# –ú–æ–¥—É–ª–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Pillow (PIL) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
from PIL import Image
from PIL.ImageQt import ImageQt

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ utils.py
from utils import WatermarkParams, apply_watermark_to_pillow_image


# --- –ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
# –ß—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ "–∑–∞–≤–∏—Å–∞–ª" –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤,
# –º—ã –≤—ã–Ω–æ—Å–∏–º —ç—Ç—É –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ (QThread).
class ImageProcessingThread(QThread):
    # –°–∏–≥–Ω–∞–ª—ã - —ç—Ç–æ —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–º –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É –æ —Å–æ–±—ã—Ç–∏—è—Ö.
    finished_one = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    error = pyqtSignal(str)         # –°–∏–≥–Ω–∞–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    def __init__(self, image_file: str, result_file: str, params: WatermarkParams):
        super().__init__()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞
        self.image_file, self.result_file, self.params = image_file, result_file, params
        self._is_running = True  # –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ—Ç–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å

    
    def run(self):
        if not self._is_running:
            return  # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –≤—ã—Ö–æ–¥–∏–º

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            base_image = Image.open(self.image_file)
            watermarked_image = apply_watermark_to_pillow_image(base_image, self.params)
            watermarked_image.convert("RGB").save(self.result_file, "JPEG" if self.result_file.lower().endswith((".jpg", ".jpeg")) else "PNG")

            if self._is_running:
                # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ –∏ –Ω–∞—Å –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª "–≥–æ—Ç–æ–≤–æ"
                self.finished_one.emit(self.result_file)
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            if self._is_running:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª "–æ—à–∏–±–∫–∞" —Å —Ç–µ–∫—Å—Ç–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                self.error.emit(f"–û—à–∏–±–∫–∞ —Å —Ñ–∞–π–ª–æ–º {os.path.basename(self.image_file)}: {e}")

    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ –∏–∑–≤–Ω–µ
    def stop(self):
        self._is_running = False


# --- –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç –≤–∫–ª–∞–¥–∫–∏ "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" ---
class ImageTab(QWidget):
    def __init__(self, settings):
        super().__init__()
        self.settings = settings  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.image_threads = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.processed_count = 0  # –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.current_preview_path = None  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
        self.current_base_pillow_image = None  # PIL-–æ–±—ä–µ–∫—Ç —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        self.banner_path = "" # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –±–∞–Ω–Ω–µ—Ä—É
        
        self.init_ui()
        self.connect_signals()
        self.load_settings()

    # --- –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
    def init_ui(self):
        main_layout = QHBoxLayout(self)
        
        # --- Left Panel ---
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)
        left_panel.setFixedWidth(450)

        wm_type_layout = QHBoxLayout()
        self.radio_text_wm = QRadioButton("–¢–µ–∫—Å—Ç")
        self.radio_text_wm.setChecked(True)
        self.radio_image_wm = QRadioButton("–ë–∞–Ω–Ω–µ—Ä")
        wm_type_layout.addWidget(QLabel("–¢–∏–ø –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:"))
        wm_type_layout.addWidget(self.radio_text_wm)
        wm_type_layout.addWidget(self.radio_image_wm)
        wm_type_layout.addStretch()
        left_layout.addLayout(wm_type_layout)

        # -- Text Controls --
        self.text_controls_widget = QWidget()
        text_layout = QVBoxLayout(self.text_controls_widget)
        text_layout.setContentsMargins(0, 0, 0, 0)
        self.label_watermark_img = QLabel("–¢–µ–∫—Å—Ç –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
        self.label_watermark_img.setObjectName("label_watermark_img")
        self.input_watermark_img = QLineEdit()
        self.input_watermark_img.setPlaceholderText("–í–∞—à —Ç–µ–∫—Å—Ç...")
        text_grid = QGridLayout()
        self.combo_font_img = QComboBox()
        self.combo_font_img.addItems(QFontDatabase.families())
        self.spin_font_size_img = QSpinBox()
        self.spin_font_size_img.setRange(1, 50)
        self.spin_font_size_img.setValue(10)
        self.spin_font_size_img.setSuffix(" %")
        text_grid.addWidget(QLabel("–®—Ä–∏—Ñ—Ç:"), 0, 0)
        text_grid.addWidget(self.combo_font_img, 0, 1)
        text_grid.addWidget(QLabel("–û—Ç–Ω. —Ä–∞–∑–º–µ—Ä:"), 0, 2)
        text_grid.addWidget(self.spin_font_size_img, 0, 3)
        text_layout.addWidget(self.label_watermark_img)
        text_layout.addWidget(self.input_watermark_img)
        text_layout.addLayout(text_grid)
        
        # -- Image Controls --
        self.image_controls_widget = QWidget()
        image_layout = QVBoxLayout(self.image_controls_widget)
        image_layout.setContentsMargins(0, 0, 0, 0)
        self.btn_select_banner = QPushButton("–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞")
        self.label_banner_path = QLabel("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.label_banner_path.setStyleSheet("font-style: italic;")
        scale_layout = QHBoxLayout()
        self.spin_banner_scale = QSpinBox()
        self.spin_banner_scale.setRange(1, 100)
        self.spin_banner_scale.setValue(25)
        self.spin_banner_scale.setSuffix(" %")
        scale_layout.addWidget(QLabel("–ú–∞—Å—à—Ç–∞–± (–æ—Ç —à–∏—Ä–∏–Ω—ã):"))
        scale_layout.addWidget(self.spin_banner_scale)
        scale_layout.addStretch()
        image_layout.addWidget(self.btn_select_banner)
        image_layout.addWidget(self.label_banner_path)
        image_layout.addLayout(scale_layout)

        self.controls_stack = QStackedWidget()
        self.controls_stack.addWidget(self.text_controls_widget)
        self.controls_stack.addWidget(self.image_controls_widget)
        left_layout.addWidget(self.controls_stack)

        # -- Common Controls --
        common_controls_frame = QFrame()
        common_layout = QGridLayout(common_controls_frame)
        self.combo_position_img = QComboBox()
        self.combo_position_img.addItems(["–¶–µ–Ω—Ç—Ä", "–í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª", "–í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª", "–ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª", "–ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª"])
        self.spin_offset_x = QSpinBox(); self.spin_offset_x.setRange(-2000, 2000)
        self.spin_offset_y = QSpinBox(); self.spin_offset_y.setRange(-2000, 2000)
        opacity_layout = QHBoxLayout()
        self.slider_opacity_img = QSlider(Qt.Orientation.Horizontal)
        self.slider_opacity_img.setRange(0, 255); self.slider_opacity_img.setValue(128)
        opacity_layout.addWidget(QLabel("–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:"))
        opacity_layout.addWidget(self.slider_opacity_img)
        common_layout.addWidget(QLabel("–ü–æ–∑–∏—Ü–∏—è:"), 0, 0)
        common_layout.addWidget(self.combo_position_img, 0, 1, 1, 3)
        common_layout.addWidget(QLabel("–°–º–µ—â–µ–Ω–∏–µ X:"), 1, 0); common_layout.addWidget(self.spin_offset_x, 1, 1)
        common_layout.addWidget(QLabel("–°–º–µ—â–µ–Ω–∏–µ Y:"), 1, 2); common_layout.addWidget(self.spin_offset_y, 1, 3)
        common_layout.addLayout(opacity_layout, 2, 0, 1, 4)
        left_layout.addWidget(common_controls_frame)

        self.image_button_img = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        left_layout.addWidget(self.image_button_img)
        
        self.image_list_widget = QListWidget()
        self.image_list_widget.setViewMode(QListWidget.ViewMode.IconMode)
        self.image_list_widget.setIconSize(QSize(100, 100))
        self.image_list_widget.setResizeMode(QListWidget.ResizeMode.Adjust)
        self.image_list_widget.setMovement(QListWidget.Movement.Static)
        self.image_list_widget.setSpacing(10)
        self.image_list_widget.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        left_layout.addWidget(self.image_list_widget)

        self.progress_bar_img = QProgressBar()
        self.progress_bar_img.setVisible(False)
        left_layout.addWidget(self.progress_bar_img)

        action_buttons_layout = QHBoxLayout()
        self.watermark_button_img = QPushButton("üñãÔ∏è –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ –≤—Å–µ–º")
        self.cancel_button_img = QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
        self.cancel_button_img.setObjectName("cancel_button_img")
        action_buttons_layout.addWidget(self.watermark_button_img)
        action_buttons_layout.addWidget(self.cancel_button_img)
        left_layout.addLayout(action_buttons_layout)
        
        main_layout.addWidget(left_panel)

        # --- Right Panel ---
        right_panel = QFrame()
        right_panel.setFrameShape(QFrame.Shape.StyledPanel)
        right_layout = QVBoxLayout(right_panel)
        self.preview_label = QLabel()
        self.preview_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.preview_label.setMinimumSize(400, 400)
        self.preview_label_placeholder = QLabel("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Ö,\n—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        self.preview_label_placeholder.setObjectName("preview_label_placeholder")
        self.preview_label_placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.preview_stack = QStackedWidget()
        self.preview_stack.addWidget(self.preview_label_placeholder)
        self.preview_stack.addWidget(self.preview_label)
        right_layout.addWidget(self.preview_stack)
        main_layout.addWidget(right_panel, 1)
        
        self.reset_processing_state()

    # --- –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤ ---
    def connect_signals(self):
        # Update preview on any setting change
        self.radio_text_wm.toggled.connect(self._on_settings_changed)
        self.radio_image_wm.toggled.connect(self._on_settings_changed)
        self.input_watermark_img.textChanged.connect(self._on_settings_changed)
        self.combo_font_img.currentTextChanged.connect(self._on_settings_changed)
        self.spin_font_size_img.valueChanged.connect(self._on_settings_changed)
        self.spin_banner_scale.valueChanged.connect(self._on_settings_changed)
        self.combo_position_img.currentTextChanged.connect(self._on_settings_changed)
        self.spin_offset_x.valueChanged.connect(self._on_settings_changed)
        self.spin_offset_y.valueChanged.connect(self._on_settings_changed)
        self.slider_opacity_img.valueChanged.connect(self._on_settings_changed)
        
        # Buttons
        self.btn_select_banner.clicked.connect(self.select_banner_image)
        self.image_button_img.clicked.connect(self.select_images)
        self.watermark_button_img.clicked.connect(self.apply_watermark_to_all)
        self.cancel_button_img.clicked.connect(self.cancel_image_processing)
        
        # Image list
        self.image_list_widget.itemClicked.connect(self.on_thumbnail_click)
        self.image_list_widget.customContextMenuRequested.connect(self.show_image_context_menu)

    def _on_settings_changed(self, _=None):
        is_text_mode = self.radio_text_wm.isChecked()
        self.controls_stack.setCurrentWidget(self.text_controls_widget if is_text_mode else self.image_controls_widget)
        self.update_preview()

    # --- –°–ª–æ—Ç—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π) ---

    def select_banner_image(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞."""
        file, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–Ω–µ—Ä", "", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg)")
        if file:
            self.banner_path = file
            self.label_banner_path.setText(os.path.basename(file))
            self.update_preview()

    def select_images(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        files, _ = QFileDialog.getOpenFileNames(self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.bmp *.gif)")
        if files: self.add_files_to_list(files)

    def add_files_to_list(self, file_list):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫ –º–∏–Ω–∏–∞—Ç—é—Ä."""
        for file_path in file_list:
            if not any(self.image_list_widget.item(i).data(Qt.ItemDataRole.UserRole) == file_path for i in range(self.image_list_widget.count())):
                item = QListWidgetItem(QIcon(QPixmap(file_path)), os.path.basename(file_path))
                item.setData(Qt.ItemDataRole.UserRole, file_path)
                self.image_list_widget.addItem(item)
        if self.image_list_widget.count() > 0 and self.current_preview_path is None:
            self.on_thumbnail_click(self.image_list_widget.item(0))
        self._update_apply_button_state()

    def on_thumbnail_click(self, item):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –º–∏–Ω–∏–∞—Ç—é—Ä–µ –≤ —Å–ø–∏—Å–∫–µ."""
        path = item.data(Qt.ItemDataRole.UserRole)
        try:
            self.current_preview_path = path
            self.current_base_pillow_image = Image.open(path)
            self.preview_stack.setCurrentWidget(self.preview_label)
            self.update_preview()
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {e}")
            self.current_preview_path = None
            self.current_base_pillow_image = None
            self.preview_stack.setCurrentWidget(self.preview_label_placeholder)

    def show_image_context_menu(self, position):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∞–≤—ã–π –∫–ª–∏–∫) –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞."""
        item = self.image_list_widget.itemAt(position)
        if not item: return
        menu = QMenu()
        delete_action = menu.addAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        action = menu.exec(self.image_list_widget.mapToGlobal(position))
        if action == delete_action: self.delete_selected_image(item)

    def delete_selected_image(self, item_to_delete):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞."""
        path_to_delete = item_to_delete.data(Qt.ItemDataRole.UserRole)
        self.image_list_widget.takeItem(self.image_list_widget.row(item_to_delete))
        if path_to_delete == self.current_preview_path:
            self.current_preview_path = None
            self.current_base_pillow_image = None
            if self.image_list_widget.count() > 0:
                self.on_thumbnail_click(self.image_list_widget.item(0))
            else:
                self.preview_stack.setCurrentWidget(self.preview_label_placeholder)
        self._update_apply_button_state()

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

    def update_preview(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–∫–Ω–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
        if self.current_base_pillow_image is None: return
        params = self.get_current_params()
        watermarked_pillow_image = apply_watermark_to_pillow_image(self.current_base_pillow_image, params)
        q_image = ImageQt(watermarked_pillow_image.convert('RGBA'))
        pixmap = QPixmap.fromImage(q_image)
        scaled_pixmap = pixmap.scaled(self.preview_label.size(), Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation)
        self.preview_label.setPixmap(scaled_pixmap)

    def apply_watermark_to_all(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –Ω–∞ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ."""
        if self.image_list_widget.count() == 0: return
        params = self.get_current_params()
        if params.watermark_type == "text" and not params.text:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞."); return
        if params.watermark_type == "image" and not params.image_path:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞."); return
        output_dir = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if not output_dir: return

        self.processed_count = 0
        self.progress_bar_img.setMaximum(self.image_list_widget.count())
        self.reset_processing_state(is_processing=True)
        self.image_threads = []

        for i in range(self.image_list_widget.count()):
            image_file = self.image_list_widget.item(i).data(Qt.ItemDataRole.UserRole)
            base_name, ext = os.path.splitext(os.path.basename(image_file))
            result_file = os.path.join(output_dir, f"watermarked_{base_name}{ext}")
            thread = ImageProcessingThread(image_file, result_file, params)
            thread.finished_one.connect(self.on_image_finished)
            thread.error.connect(self.on_image_error)
            self.image_threads.append(thread)
            thread.start()

    @pyqtSlot(str)
    def on_image_finished(self, result_file):
        """–°–ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É."""
        self.processed_count += 1
        self.progress_bar_img.setValue(self.processed_count)
        if self.processed_count == len(self.image_threads):
            QMessageBox.information(self, "–£—Å–ø–µ—Ö!", "–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            self.reset_processing_state()
            self.save_settings()

    @pyqtSlot(str)
    def on_image_error(self, error_message):
        """–°–ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤ –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."""
        QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", error_message)
        self.processed_count += 1
        self.progress_bar_img.setValue(self.processed_count)
        if self.processed_count == len(self.image_threads):
            QMessageBox.information(self, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏.")
            self.reset_processing_state()
    
    def cancel_image_processing(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        for thread in self.image_threads: thread.stop()
        self.reset_processing_state()
        QMessageBox.information(self, "–û—Ç–º–µ–Ω–∞", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

    def get_current_params(self) -> WatermarkParams:
        """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç WatermarkParams."""
        return WatermarkParams(
            watermark_type="image" if self.radio_image_wm.isChecked() else "text", text=self.input_watermark_img.text(),
            position=self.combo_position_img.currentText(), opacity=self.slider_opacity_img.value(),
            font_name=self.combo_font_img.currentText(), font_size_relative=self.spin_font_size_img.value(),
            offset_x=self.spin_offset_x.value(), offset_y=self.spin_offset_y.value(),
            image_path=self.banner_path, image_scale=self.spin_banner_scale.value()
        )
    
    def reset_processing_state(self, is_processing=False):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ / –æ–∂–∏–¥–∞–Ω–∏–µ)."""
        self.progress_bar_img.setVisible(is_processing)
        self.cancel_button_img.setEnabled(is_processing)
        self.watermark_button_img.setEnabled(not is_processing)
        if not is_processing:
            self.progress_bar_img.setValue(0)
            self.processed_count = 0
            self.image_threads = []
            self._update_apply_button_state()
            
    def _update_apply_button_state(self):
        """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–º–µ–Ω–∏—Ç—å' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —Å–ø–∏—Å–∫–µ."""
        self.watermark_button_img.setEnabled(self.image_list_widget.count() > 0)

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.input_watermark_img.setText(self.settings.value("text_watermark", "Watermark"))
        self.combo_position_img.setCurrentText(self.settings.value("position", "–¶–µ–Ω—Ç—Ä"))
        self.slider_opacity_img.setValue(self.settings.value("opacity", 128, type=int))
        self.combo_font_img.setCurrentText(self.settings.value("font_name", "Arial"))
        self.spin_font_size_img.setValue(self.settings.value("font_size", 10, type=int))
        self.spin_offset_x.setValue(self.settings.value("offset_x", 0, type=int))
        self.spin_offset_y.setValue(self.settings.value("offset_y", 0, type=int))
        self.banner_path = self.settings.value("banner_path", "")
        if self.banner_path and os.path.exists(self.banner_path):
            self.label_banner_path.setText(os.path.basename(self.banner_path))
        else:
            self.label_banner_path.setText("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.spin_banner_scale.setValue(self.settings.value("banner_scale", 25, type=int))
        wm_type = self.settings.value("wm_type", "text")
        if wm_type == 'image': self.radio_image_wm.setChecked(True)
        else: self.radio_text_wm.setChecked(True)
        self._on_settings_changed()

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        self.settings.setValue("wm_type", "image" if self.radio_image_wm.isChecked() else "text")
        self.settings.setValue("text_watermark", self.input_watermark_img.text())
        self.settings.setValue("position", self.combo_position_img.currentText())
        self.settings.setValue("opacity", self.slider_opacity_img.value())
        self.settings.setValue("font_name", self.combo_font_img.currentText())
        self.settings.setValue("font_size", self.spin_font_size_img.value())
        self.settings.setValue("offset_x", self.spin_offset_x.value())
        self.settings.setValue("offset_y", self.spin_offset_y.value())
        self.settings.setValue("banner_path", self.banner_path)
        self.settings.setValue("banner_scale", self.spin_banner_scale.value())
